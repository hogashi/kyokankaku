{"version":3,"sources":["CharSet.js","App.js","serviceWorker.js","index.js"],"names":["useState","React","useEffect","CharSet","_ref","char","defaultColor","defaultCode","indexOf","_useState","_useState2","Object","slicedToArray","colorCode","setColorCode","_useState3","_useState4","backgroundColor","setBackgroundColor","_colorCode$match$slic","match","slice","map","n","parseInt","_colorCode$match$slic2","r","g","b","Math","max","min","react_default","a","createElement","className","charsetStyle","charStyle","color","style","type","value","onChange","e","target","CharLine","line","test","defaultColors","colorIndex","chars","split","key","CharSets","_ref2","charLines","lines","lineIndex","App_CharLine","Boolean","window","location","hostname","ReactDOM","render","setLines","App_CharSets","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6LAEQA,SAAwBC,IAAxBD,UAAUE,EAAcD,IAAdC,UAKlBC,EAAA,SAAeC,GAA4B,IAAzBC,EAAyBD,EAAzBC,KAAMC,EAAmBF,EAAnBE,aAChBC,GAAuC,IAAzB,qBAAMC,QAAQH,IAAeC,GAJrC,UAG6BG,EAEPT,EAASO,GAFFG,EAAAC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,GAElCI,EAFkCH,EAAA,GAEvBI,EAFuBJ,EAAA,GAAAK,EAGKf,EALlC,WAE6BgB,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGlCE,EAHkCD,EAAA,GAGjBE,EAHiBF,EAAA,GAWzC,GANAd,EAAU,WAAM,IAAAiB,EACIN,EAAUO,MAAM,iBAAiBC,MAAM,EAAG,GAAGC,IAAI,SAAAC,GAAC,OAAIC,SAASD,EAAG,MADtEE,EAAAd,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GACPO,EADOD,EAAA,GACJE,EADIF,EAAA,GACDG,EADCH,EAAA,GAGdP,GAAqBW,KAAKC,IAAIJ,EAAGC,EAAGC,GAAKC,KAAKE,IAAIL,EAAGC,EAAGC,IAAM,EAAK,IAVzD,UADA,YAYT,CAACf,IAES,MAATR,EACF,OAAO2B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAGxB,IAAMC,EAAe,CAAEnB,mBACjBoB,EAAY,CAAEC,MAAOzB,GAE3B,OACEmB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUI,MAAOH,GAC9BJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOI,MAAOF,GAC1BhC,GAEH2B,EAAAC,EAAAC,cAAA,SACEM,KAAK,QACLC,MAAO5B,EACP6B,SAAU,SAACC,GAAD,OAAO7B,EAAa6B,EAAEC,OAAOH,YC7BvCzC,EAAaC,IAAbD,SAEF6C,EAAW,SAAAzC,GAAc,IAAX0C,EAAW1C,EAAX0C,KAClB,GAAI,OAAOC,KAAKD,GACZ,OAAO,KAEX,IAAME,EAAgB,CAAC,UAAW,UAAW,WACzCC,GAAc,EACZC,EAAQJ,EAAKK,MAAM,IAAI7B,IAAI,SAACjB,GAEhC,OADA4C,GAAc,EACPjB,EAAAC,EAAAC,cAAC/B,EAAD,CAASiD,IAAK/C,EAAMA,KAAMA,EAAMC,aAAc0C,EAAcC,OAErE,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACZe,IAKDG,EAAW,SAAAC,GAAe,IACxBC,EADwBD,EAAZE,MACML,MAAM,MAAM7B,IAAI,SAACwB,EAAMW,GAAP,OAAqBzB,EAAAC,EAAAC,cAACwB,EAAD,CAAUZ,KAAMA,EAAMM,IAAKK,MACxF,OACEzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZoB,ICfaI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS1C,MACvB,2DCZN2C,IAASC,OAAOhC,EAAAC,EAAAC,cF0BD,WAAM,IAAAzB,EACOT,EAAS,2BADhBU,EAAAC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,GACZ+C,EADY9C,EAAA,GACLuD,EADKvD,EAAA,GAGnB,OACEsB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,YACEO,MAAOe,EACPd,SAAU,SAACC,GAAD,OAAOsB,EAAStB,EAAEC,OAAOH,UACrCT,EAAAC,EAAAC,cAACgC,EAAD,CAAUV,MAAOA,MElCP,MAASW,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e98f4e66.chunk.js","sourcesContent":["import React from 'react';\n\nconst { useState, useEffect } = React;\n\nconst BLACK = '#000000';\nconst WHITE = '#ffffff';\n\nexport default ({ char, defaultColor }) => {\n  const defaultCode = '共感覚'.indexOf(char) !== -1 ? defaultColor || BLACK : BLACK;\n  const [colorCode, setColorCode] = useState(defaultCode);\n  const [backgroundColor, setBackgroundColor] = useState(WHITE);\n\n  useEffect(() => {\n    const [r, g, b] = colorCode.match(/[0-9a-f]{2}/ig).slice(0, 3).map(n => parseInt(n, 16));\n    // 180以上明るかったら背景を黒にする\n    setBackgroundColor(((Math.max(r, g, b) + Math.min(r, g, b)) / 2) < 180 ? WHITE : BLACK);\n  }, [colorCode]);\n\n  if (char === ' ') {\n    return <div className=\"charSet space\"></div>;\n  }\n\n  const charsetStyle = { backgroundColor };\n  const charStyle = { color: colorCode };\n\n  return (\n    <div className=\"charSet\" style={charsetStyle}>\n      <div className=\"char\" style={charStyle}>\n        {char}\n      </div>\n      <input\n        type=\"color\"\n        value={colorCode}\n        onChange={(e) => setColorCode(e.target.value)} />\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.css';\nimport CharSet from './CharSet';\n\nconst { useState } = React;\n\nconst CharLine = ({ line }) => {\n  if (/^ *$/.test(line)) {\n      return null;\n  }\n  const defaultColors = ['#ff5555', '#0044ff', '#44dd44'];\n  let colorIndex = -1;\n  const chars = line.split('').map((char) => {\n    colorIndex += 1;\n    return <CharSet key={char} char={char} defaultColor={defaultColors[colorIndex]} />;\n  });\n  return (\n    <div className=\"charLine\">\n      {chars}\n    </div>\n  );\n};\n\nconst CharSets = ({ lines }) => {\n  const charLines = lines.split('\\n').map((line, lineIndex) => <CharLine line={line} key={lineIndex} />);\n  return (\n    <div className=\"charLines\">\n      {charLines}\n    </div>\n  );\n};\n\nexport default () => {\n  const [lines, setLines] = useState('共感覚\\nabc');\n\n  return (\n    <div className=\"App\">\n      <textarea\n        value={lines}\n        onChange={(e) => setLines(e.target.value)}></textarea>\n      <CharSets lines={lines} />\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}